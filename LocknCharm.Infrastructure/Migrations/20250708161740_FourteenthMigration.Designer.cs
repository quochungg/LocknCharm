// <auto-generated />
using System;
using LocknCharm.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LocknCharm.Infrastructure.Migrations
{
    [DbContext(typeof(KeyChainDbContext))]
    [Migration("20250708161740_FourteenthMigration")]
    partial class FourteenthMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LocknCharm.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            ConcurrencyStamp = "51cf62d5-1aa4-4cc4-aa51-19c5f5df514f",
                            CreatedTime = new DateTime(2025, 7, 8, 16, 17, 39, 217, DateTimeKind.Utc).AddTicks(1207),
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            ConcurrencyStamp = "8c936916-feb1-4287-ab95-c1a5477c78a6",
                            CreatedTime = new DateTime(2025, 7, 8, 16, 17, 39, 217, DateTimeKind.Utc).AddTicks(1210),
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45b9a6d3-a9bc-465c-930b-bb48c8007073",
                            CreatedTime = new DateTime(2025, 7, 8, 16, 17, 39, 217, DateTimeKind.Utc).AddTicks(1391),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMDjrSU/gBhpe+gjx5IWoNnSTdWcPf+GYYt0geabIDvKHDLvasArXjb7JCJG5SZI1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2c9d79d-2b8e-4647-8f46-549dbd65077c",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "663cac93-68c8-433f-b2a1-a58e43d61a1e",
                            CreatedTime = new DateTime(2025, 7, 8, 16, 17, 39, 282, DateTimeKind.Utc).AddTicks(7011),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Application",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEL+lwndX+/NIK00pEEpuXhwMeSmno1vyueX7qHz1IDaOe0ZcHd81ddfJ5T6Xrv6UeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43cba068-41ac-4bc3-ba37-8f8a41cf8d09",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        });
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CartTotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsOrdered")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CartID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e"),
                            CreatedDate = new DateTime(2025, 7, 8, 16, 17, 39, 350, DateTimeKind.Utc).AddTicks(393),
                            Description = "Bộ sưu tập móc khóa Thú Cưng đáng yêu dành cho những người yêu động vật. Từ những chú chó tinh nghịch đến mèo lười dễ thương, mỗi sản phẩm đều được thiết kế tỉ mỉ, mang lại cảm giác gần gũi và cá tính riêng. Phù hợp để treo trên balo, chìa khóa hoặc làm quà tặng đầy ý nghĩa.",
                            ImageUrl = "https://res.cloudinary.com/ddewgbug1/image/upload/v1751807280/7_tirqcu.png",
                            Name = "Móc khóa Thú Cưng"
                        },
                        new
                        {
                            Id = new Guid("3c4d5e6f-7a8b-9c0d-1e2f-3a4b5c6d7e8f"),
                            CreatedDate = new DateTime(2025, 7, 8, 16, 17, 39, 350, DateTimeKind.Utc).AddTicks(420),
                            Description = "Những chiếc móc khóa Chibi siêu dễ thương với thiết kế nhân vật mini độc đáo, đáng yêu đến từng chi tiết. Phù hợp cho các fan anime, manga hoặc bất kỳ ai yêu thích phong cách dễ thương và nổi bật. Một món phụ kiện nhỏ nhưng đầy cá tính để thể hiện gu thẩm mỹ riêng của bạn.",
                            ImageUrl = "https://res.cloudinary.com/ddewgbug1/image/upload/v1751806861/edef84a7723416a1b2f0428f91b3f944_juhuh6.jpg",
                            Name = "Móc khóa Chibi"
                        },
                        new
                        {
                            Id = new Guid("4d5e6f7a-8b9c-0d1e-2f3a-4b5c6d7e8f90"),
                            CreatedDate = new DateTime(2025, 7, 8, 16, 17, 39, 350, DateTimeKind.Utc).AddTicks(422),
                            Description = "Móc khóa Couple là biểu tượng ngọt ngào dành cho các cặp đôi. Thiết kế đôi độc đáo, có thể ghép lại với nhau như một mảnh ghép hoàn hảo, thể hiện sự gắn kết và tình yêu bền chặt. Phù hợp làm quà tặng trong các dịp kỷ niệm, Valentine hay đơn giản là để luôn mang theo một phần của người thương bên cạnh.",
                            ImageUrl = "https://res.cloudinary.com/ddewgbug1/image/upload/v1751807225/11_y71hx0.png",
                            Name = "Móc khóa Couple"
                        },
                        new
                        {
                            Id = new Guid("5e6f7a8b-9c0d-1e2f-3a4b-5c6d7e8f90a1"),
                            CreatedDate = new DateTime(2025, 7, 8, 16, 17, 39, 350, DateTimeKind.Utc).AddTicks(425),
                            Description = "Móc khóa Doanh Nghiệp là lựa chọn quà tặng tinh tế và chuyên nghiệp cho khách hàng, đối tác hoặc sự kiện. Thiết kế tối giản nhưng sang trọng, dễ dàng in logo, slogan hoặc thông tin thương hiệu, giúp tăng độ nhận diện và để lại ấn tượng tốt với người nhận. Phù hợp cho hội nghị, sự kiện quảng bá hoặc tri ân khách hàng.",
                            ImageUrl = "https://res.cloudinary.com/ddewgbug1/image/upload/v1751807173/MICA-14_trrgit.jpg",
                            Name = "Móc khóa Doanh Nghiệp"
                        },
                        new
                        {
                            Id = new Guid("6f7a8b9c-0d1e-2f3a-4b5c-6d7e8f90a1b2"),
                            CreatedDate = new DateTime(2025, 7, 8, 16, 17, 39, 350, DateTimeKind.Utc).AddTicks(428),
                            Description = "Móc khóa Lời Nhắn mang đến một cách đặc biệt để gửi gắm thông điệp yêu thương, động viên hoặc lời chúc đến người thân yêu. Mỗi chiếc móc khóa có thể in, khắc hoặc đính kèm lời nhắn ý nghĩa, tạo nên món quà nhỏ nhưng đong đầy cảm xúc. Phù hợp cho bạn bè, người yêu, gia đình – hoặc chính bản thân bạn như một lời nhắc nhở tích cực mỗi ngày.",
                            ImageUrl = "https://res.cloudinary.com/ddewgbug1/image/upload/v1751807198/8_kdtfrk.jpg",
                            Name = "Móc khóa Lời Nhắn"
                        },
                        new
                        {
                            Id = new Guid("7a8b9c0d-1e2f-3a4b-5c6d-7e8f90a1b2c3"),
                            CreatedDate = new DateTime(2025, 7, 8, 16, 17, 39, 350, DateTimeKind.Utc).AddTicks(432),
                            Description = "Lấy cảm hứng từ tinh hoa văn hóa Việt Nam, bộ sưu tập Móc khóa Chất Việt tái hiện sống động những biểu tượng quen thuộc như cà phê phin đậm đà, ổ bánh mì giòn rụm hay cuốn gỏi thanh mát. Mỗi chiếc móc khóa là một lát cắt nhỏ của đời sống Việt – bình dị, gần gũi mà đầy tự hào. Phù hợp làm quà tặng độc đáo cho bạn bè quốc tế, người yêu ẩm thực, hoặc đơn giản là để bạn luôn mang theo hương vị quê hương bên mình.",
                            ImageUrl = "https://res.cloudinary.com/ddewgbug1/image/upload/v1751806345/17_et0abi.png",
                            Name = "Móc khóa Chất Việt"
                        });
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.DeliveryDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DeliveryDetail");
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DeliveryDetailId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("DeliveryDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OrderCode")
                        .HasColumnType("bigint");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentLinkId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.PreMadeKeychain", b =>
                {
                    b.HasBaseType("LocknCharm.Domain.Entities.Product");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("CategoryId");

                    b.ToTable("PreMadeKeychains", (string)null);
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.ApplicationRoleClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.ApplicationUserRoles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("33333333-3333-3333-3333-333333333333"),
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTime = new DateTime(2025, 7, 8, 16, 17, 39, 350, DateTimeKind.Utc).AddTicks(176),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = new Guid("44444444-4444-4444-4444-444444444444"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedTime = new DateTime(2025, 7, 8, 16, 17, 39, 350, DateTimeKind.Utc).AddTicks(177),
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.Cart", b =>
                {
                    b.HasOne("LocknCharm.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("LocknCharm.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocknCharm.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.DeliveryDetail", b =>
                {
                    b.HasOne("LocknCharm.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.Order", b =>
                {
                    b.HasOne("LocknCharm.Domain.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocknCharm.Domain.Entities.DeliveryDetail", "DeliveryDetail")
                        .WithMany()
                        .HasForeignKey("DeliveryDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocknCharm.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("DeliveryDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.Payment", b =>
                {
                    b.HasOne("LocknCharm.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LocknCharm.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LocknCharm.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LocknCharm.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LocknCharm.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocknCharm.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LocknCharm.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.PreMadeKeychain", b =>
                {
                    b.HasOne("LocknCharm.Domain.Entities.Category", "Category")
                        .WithMany("PreMadeKeychains")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocknCharm.Domain.Entities.Product", null)
                        .WithOne()
                        .HasForeignKey("LocknCharm.Domain.Entities.PreMadeKeychain", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", null)
                        .WithOne()
                        .HasForeignKey("LocknCharm.Domain.Entities.ApplicationRoleClaim", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.ApplicationUserRoles", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", null)
                        .WithOne()
                        .HasForeignKey("LocknCharm.Domain.Entities.ApplicationUserRoles", "UserId", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("LocknCharm.Domain.Entities.Category", b =>
                {
                    b.Navigation("PreMadeKeychains");
                });
#pragma warning restore 612, 618
        }
    }
}
